step "Set up #{db} for testing"

service     = nil
dbsocket    = nil
gems        = ''
packages    = []
db_cmds     = []
dbuser      = 'console'
dbpassword  = 'puppet'
dbserver    = 'localhost'
dbname      = 'storedconfigs'

hosts.each do |host|

  next unless host['roles'].include?('master')

  step 'select db/platform specifics'
  case db
  # select the appropriate packages
  when 'mysql'
    dbsocket = '/var/run/mysqld/mysqld.sock'
    gems = 'mysql' unless TestConfig.is_pe?
    db_user_cmd = %Q{mysql -u root -p'puppet' -e "create user '#{dbuser}'@'#{dbserver}' identified by '#{dbpassword}';"}

    db_create_cmd = %Q{mysql -u root -p'puppet' -e "create database #{dbname} character set utf8;"}

    db_privileges_cmd = %Q{mysql -u root -p'puppet' -e "grant all privileges on #{dbname}.* to '#{dbuser}'@'#{dbserver}';"}

    db_cmds = TestConfig.is_pe? ? [ ] : [ db_user_cmd ]
    db_cmds += [ db_create_cmd, db_privileges_cmd ]

    case host['platform']
    when /debian|ubuntu/
      packages = ['mysql-client', 'mysql-server']
      service = 'mysql'
    when /el/
      packages = ['mysql', 'mysql-server']
      service = 'mysqld'
    when /sles/
      packages = ['mysql']
      service = 'mysql'
    end
  when 'sqlite3'
    dbuser = nil
    dbname = nil
    packages = ["#{db}", 'libsqlite3-dev']
    gems = 'sqlite3'
  when 'postgresql'
    dbserver = 'localhost'
    packages = ["#{db}", 'postgresql-server-dev-8.4']
    gems = 'pg'
    db_root_cmd = %{su postgres -c "createuser --superuser root"}
    db_user_cmd = %Q{psql -d template1 -c "create user #{dbuser} with password '#{dbpassword}'"}
    db_create_cmd = %Q{psql -d template1 -c "create database #{dbname}"}
    db_privileges_cmd = %Q{psql -d template1 -c "grant create on database #{dbname} to #{dbuser}"}

    db_cmds = [ db_root_cmd, db_user_cmd, db_create_cmd, db_privileges_cmd ]
  end

  step 'install db if necessary'
  host.install(packages) unless db == 'mysql' && TestConfig.is_pe?

  # install the PE specific Ruby Development Headers,
  # included in FOSS versions of ruby

  step 'install ruby dev if pe'
  host.ensure_ruby_dev!

  step 'install gems if necessary'
  host.gem("install #{gems}") unless
    db == 'mysql' && TestConfig.is_pe?

  step 'start service if necessary'
  on host, "service #{service} start",
    :acceptable_exit_codes => [0, 1] if service

  step 'configure the db'
  db_cmds.each do |cmd|
    on host, cmd
  end


  step 'update conf file'
  host['puppet_conf']['master']['storeconfigs'] = true
  host['puppet_conf']['master']['dbadapter'] = db
  host['puppet_conf']['master']['dbuser'] = dbuser if dbuser
  host['puppet_conf']['master']['dbpassword'] = dbpassword if dbpassword
  host['puppet_conf']['master']['dbserver'] = dbserver if dbserver
  host['puppet_conf']['master']['dbsocket'] = dbsocket if dbsocket
  host['puppet_conf']['master']['dbname'] = dbname if dbname
  host['puppet_conf']['master']['dbmigrate'] = true if db == 'postgresql'

  on host, %Q!cat > #{host['puppet_conf_path']} <<EOF
#{host['puppet_conf'].out}
EOF
!

  step 'add storeconfig class to node'
  on host, 'mkdir -p /etc/puppetlabs/puppet/modules/storeconfigs/manifests'
  on host, 'cat > /etc/puppetlabs/puppet/modules/storeconfigs/manifests/init.pp <<EOF
class storeconfigs { }
EOF'

  tasks = [
    'nodeclass:add name=storeconfigs',
    'nodegroup:addclass name=default class=storeconfigs'
   ]

  tasks.each do |task|
    on host, "cd #{host['dashboard_home']}; #{host['rake']} #{task}"
  end

  step 'Bounce the Puppet Master before continuing'
  host.service :master, :restart

end
